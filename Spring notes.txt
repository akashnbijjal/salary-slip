Maven
----------------------
Maven is project management tool, it gives project structure & managed contents and also helps manage dependencies 

depedencies-->Its a Library that provides specific functionality that we can use in our application

Spring core
--------------------------------------
*Spring core is a framework is an open source framework for developing enterprise application it offers dependency injection, 
 pojo class, even though it is loaded with lot of features it is lightweight, it is used to create scalable, secure& robust enterprise applications

JPA---> java persistence api
-------------------------------------------------
*it provides a standard way to persist Java objects to a relational database.
* JPA is the standard ORM tool used by the spring data JPA


Dependency Injection (DI):
-------------------------------------------------------------
It is like getting help from a friend instead of doing everything by yourself. In software development, it means that instead of an object creating the things it needs to work, those things are provided to it from the outside. This helps in keeping the code flexible, making it easier to change and test different parts without affecting everything else.

Autowiring
------------------------
It is feature of spring framework that enables you to inject the object dependency implicitily, primilarly uses setter or constructor injection 

1)no
2)byName--> it will injects the object dependency a/c to name of the bean 
3)byType--> it will injects the object dependency a/c to type of the bean 
4)constructor
5)autodetect

example of loose and tight coupling
---------------------------------------

1) Loose coupling


class Volume {

   public static void main(String args[]) {

        Cylinder b = new Cylinder(25, 25, 25);

           System.out.println(b.getVolume());

   }

}

final class Cylinder {

    private int volume;

    Cylinder(int length, int width, int height) {

             this.volume = length * width * height;

    }

    public int getVolume() {

             return volume;

    }

}

Explanation: In the above example, class A and class B are loosely coupled.
it means both classes are independent

2) Tight coupling
-----------------------
class Volume {

   public static void main(String args[]) {

        Cylinder b = new Cylinder(15, 15, 15);

           System.out.println(b.volume);

   }}

 class Cylinder {

   public int volume;

   Cylinder(int length, int width, int height) {

           this.volume = length * width * height;  }}


Explanation: In the above example, class A and class B are bound together and work with each other as a team.



IoC Container
-----------------
*It is a framework for implementing automatic dependency injection 
*It is responsible for creating & managing the object also provides dependency injection 

There are two types of IoC containers. 
-------------------------------------------
They are:

1)BeanFactory        :Beanfactory is like a factory class that contains a collection of beans, it instantiates 
                      the bean whenever asked  by clients.
                       
2)ApplicationContext : The ApplicationContext interface is built on top of the BeanFactory interface.
                       It adds some extra functionality than BeanFactory such as spring aop's

Dependency injection (DI)
-----------------------------------
It is a design pattern that allows an object to decouple its dependencies from its own creation and management. 
This enables loose coupling between objects and enhances the flexibility, testability, and maintainability of the code.


Dependency: A dependency is an object that another object relies on to perform its function. For example, a Car object might depend on an Engine object to run.

Injection: Injection refers to the process of providing dependencies to an object. Instead of the object creating its dependencies, they are "injected" into the object from an external source.

There are three types of dependency injection:
----------------------------------------------------
Constructor injection: dependencies are provided as constructor parameters
----------------------
Setter injection: dependencies are provided using setter methods
-----------------
Interface injection: dependencies are provided through a separate interface
--------------------
DI can be achieved through frameworks such as Spring, Guice, Dagger, etc. which provide inversion of control (IoC) containers that manage object creation and wiring of dependencies.

POJO
-----------------
(Plain old java object)

*Properties must be private
*must having default and argument constructor
*every properties should have setter and getter methods

What do you mean by IoC (Inversion of Control) Container?
Represents the inversion of responsibility of  object creation, initialization and destruction (life cycle management) from application to Spring Container.

In normal Programming, we create object with New Keyword.
In Spring We depend on Container to provide us with the required dependency Object.

*How is the configuration metadata provided to the spring container?
There are 3 ways of providing the configuration metadata.
XML based
Annotation Based : Instead of the XML approach, the beans can be configured into the component class itself by using annotations on the relevant class, method, or field declaration.
Annotation wiring is not active in the Spring container by default. This has to be enabled in the Spring XML configuration file as shown below: context:annotation-config

Java configuration Based:
Spring Framework introduced key features as part of new Java configuration support. This makes use of the @Configuration annotated classes and @Bean annotated methods. Note that:
@Bean annotation has the same role as the bean element.
Classes annotated with @Configuration allow to define inter-bean dependencies by simply calling other @Bean methods in the same class

Difference between Applicationcontext and Beanfactory IOC Container

 What are the bean scopes available in Spring?
There are 5 scopes available : 

Singleton: The scope of bean definition while using this would be a single instance per IoC container.

Prototype: Here, the scope for a single bean definition can be any number of object instances.

Request: The scope of the bean definition is an HTTP request.

Session: Here, the scope of the bean definition is HTTP-session.

Global-session: The scope of the bean definition here is a Global HTTP session.

What is a Spring configuration file
Spring configuration file is a file with .xml extension and the file contains information about the classes and interfaces and their dependencies. Using this file the spring container controls the life cycle of a spring bean and achieve Dependency Injection.

What do you understand by Dependency Injection?

IOC is achieved Through DI in spring. In DI you donâ€™t create objects, you describe how they should be created. It can be done in two ways :
Constructor Injection : Here, the IoC container invokes the class constructor with a number of arguments where each argument represents a dependency on the other class.

Setter Injection: Here, the spring container calls the setter methods on the beans after invoking a no-argument static factory method or default constructor to instantiate the bean.

For non primitive properties, we can use Autowire feature. If you use autowiring, spring container automatically initialises the dependencies of that bean. Beans are fetched from contents of application context.

Difference between Constructor and setter Injection?

Types of Auto Wiring?

There are 4 types of autowiring:
byType
byName
constructor
No






swagger
----------------
it is a tool used to develop api's
interact with api's
document api's


